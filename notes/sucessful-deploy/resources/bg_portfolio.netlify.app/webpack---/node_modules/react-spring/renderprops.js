'use strict';

var _defineProperty = require("/opt/build/repo/node_modules/@babel/runtime/helpers/defineProperty");

var _toConsumableArray = require("/opt/build/repo/node_modules/@babel/runtime/helpers/toConsumableArray");

var _assertThisInitialized = require("/opt/build/repo/node_modules/@babel/runtime/helpers/assertThisInitialized");

var _inherits = require("/opt/build/repo/node_modules/@babel/runtime/helpers/inherits");

var _possibleConstructorReturn = require("/opt/build/repo/node_modules/@babel/runtime/helpers/possibleConstructorReturn");

var _getPrototypeOf = require("/opt/build/repo/node_modules/@babel/runtime/helpers/getPrototypeOf");

var _classCallCheck = require("/opt/build/repo/node_modules/@babel/runtime/helpers/classCallCheck");

var _createClass = require("/opt/build/repo/node_modules/@babel/runtime/helpers/createClass");

function _createForOfIteratorHelper(o, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
    if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
            if (it) o = it;
            var i = 0;
            var F = function F() {};
            return {
                s: F,
                n: function n() {
                    if (i >= o.length) return {
                        done: true
                    };
                    return {
                        done: false,
                        value: o[i++]
                    };
                },
                e: function e(_e) {
                    throw _e;
                },
                f: F
            };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true,
        didErr = false,
        err;
    return {
        s: function s() {
            it = it.call(o);
        },
        n: function n() {
            var step = it.next();
            normalCompletion = step.done;
            return step;
        },
        e: function e(_e2) {
            didErr = true;
            err = _e2;
        },
        f: function f() {
            try {
                if (!normalCompletion && it.return != null) it.return();
            } finally {
                if (didErr) throw err;
            }
        }
    };
}

function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
    }
    return arr2;
}

function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
            result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else {
            result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
    };
}

function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}

Object.defineProperty(exports, '__esModule', {
    value: true
});

function _interopDefault(ex) {
    return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
}

var _objectWithoutPropertiesLoose = _interopDefault(require('@babel/runtime/helpers/esm/objectWithoutPropertiesLoose'));

var _extends = _interopDefault(require('@babel/runtime/helpers/esm/extends'));

var React = require('react');

var React__default = _interopDefault(React);

var ReactDOM = _interopDefault(require('react-dom'));

var bugfixes = undefined;
var applyAnimatedValues = undefined;
var colorNames = [];

var requestFrame = function requestFrame(cb) {
    return typeof window !== 'undefined' && window.requestAnimationFrame(cb);
};

var cancelFrame = function cancelFrame(cb) {
    return typeof window !== 'undefined' && window.cancelAnimationFrame(cb);
};

var interpolation = undefined;

var now = function now() {
    return Date.now();
};

var defaultElement = undefined;
var createAnimatedStyle = undefined;

var injectApplyAnimatedValues = function injectApplyAnimatedValues(fn, transform) {
    return applyAnimatedValues = {
        fn: fn,
        transform: transform
    };
};

var injectColorNames = function injectColorNames(names) {
    return colorNames = names;
};

var injectBugfixes = function injectBugfixes(fn) {
    return bugfixes = fn;
};

var injectInterpolation = function injectInterpolation(cls) {
    return interpolation = cls;
};

var injectFrame = function injectFrame(raf, caf) {
    var _ref = [raf, caf];
    requestFrame = _ref[0];
    cancelFrame = _ref[1];
    return _ref;
};

var injectNow = function injectNow(nowFn) {
    return now = nowFn;
};

var injectDefaultElement = function injectDefaultElement(el) {
    return defaultElement = el;
};

var injectCreateAnimatedStyle = function injectCreateAnimatedStyle(factory) {
    return createAnimatedStyle = factory;
};

var Globals = /*#__PURE__*/ Object.freeze({
    get bugfixes() {
        return bugfixes;
    },

    get applyAnimatedValues() {
        return applyAnimatedValues;
    },

    get colorNames() {
        return colorNames;
    },

    get requestFrame() {
        return requestFrame;
    },

    get cancelFrame() {
        return cancelFrame;
    },

    get interpolation() {
        return interpolation;
    },

    get now() {
        return now;
    },

    get defaultElement() {
        return defaultElement;
    },

    get createAnimatedStyle() {
        return createAnimatedStyle;
    },

    injectApplyAnimatedValues: injectApplyAnimatedValues,
    injectColorNames: injectColorNames,
    injectBugfixes: injectBugfixes,
    injectInterpolation: injectInterpolation,
    injectFrame: injectFrame,
    injectNow: injectNow,
    injectDefaultElement: injectDefaultElement,
    injectCreateAnimatedStyle: injectCreateAnimatedStyle
});

var Animated = /*#__PURE__*/ function() {
    function Animated() {
        _classCallCheck(this, Animated);
    }

    _createClass(Animated, [{
        key: "attach",
        value: function attach() {}
    }, {
        key: "detach",
        value: function detach() {}
    }, {
        key: "getValue",
        value: function getValue() {}
    }, {
        key: "getAnimatedValue",
        value: function getAnimatedValue() {
            return this.getValue();
        }
    }, {
        key: "addChild",
        value: function addChild(child) {}
    }, {
        key: "removeChild",
        value: function removeChild(child) {}
    }, {
        key: "getChildren",
        value: function getChildren() {
            return [];
        }
    }]);

    return Animated;
}();

var getValues = function getValues(object) {
    return Object.keys(object).map(function(k) {
        return object[k];
    });
};

var AnimatedWithChildren = /*#__PURE__*/ function(_Animated) {
    _inherits(AnimatedWithChildren, _Animated);

    var _super = _createSuper(AnimatedWithChildren);

    function AnimatedWithChildren() {
        var _this3;

        _classCallCheck(this, AnimatedWithChildren);

        var _this;

        _this3 = _super.apply(this, arguments);
        _this = _assertThisInitialized(_this3);
        _this3.children = [];

        _this3.getChildren = function() {
            return _this3.children;
        };

        _this3.getPayload = function(index) {
            if (index === void 0) {
                index = undefined;
            }

            return index !== void 0 && _this.payload ? _this.payload[index] : _this.payload || _this;
        };

        return _this3;
    }

    _createClass(AnimatedWithChildren, [{
        key: "addChild",
        value: function addChild(child) {
            if (this.children.length === 0) this.attach();
            this.children.push(child);
        }
    }, {
        key: "removeChild",
        value: function removeChild(child) {
            var index = this.children.indexOf(child);
            this.children.splice(index, 1);
            if (this.children.length === 0) this.detach();
        }
    }]);

    return AnimatedWithChildren;
}(Animated);

var AnimatedArrayWithChildren = /*#__PURE__*/ function(_AnimatedWithChildren) {
    _inherits(AnimatedArrayWithChildren, _AnimatedWithChildren);

    var _super2 = _createSuper(AnimatedArrayWithChildren);

    function AnimatedArrayWithChildren() {
        var _this4;

        _classCallCheck(this, AnimatedArrayWithChildren);

        _this4 = _super2.apply(this, arguments);
        _this4.payload = [];

        _this4.getAnimatedValue = function() {
            return _this4.getValue();
        };

        _this4.attach = function() {
            return _this4.payload.forEach(function(p) {
                return p instanceof Animated && p.addChild(_assertThisInitialized(_this4));
            });
        };

        _this4.detach = function() {
            return _this4.payload.forEach(function(p) {
                return p instanceof Animated && p.removeChild(_assertThisInitialized(_this4));
            });
        };

        return _this4;
    }

    return AnimatedArrayWithChildren;
}(AnimatedWithChildren);

var AnimatedObjectWithChildren = /*#__PURE__*/ function(_AnimatedWithChildren2) {
    _inherits(AnimatedObjectWithChildren, _AnimatedWithChildren2);

    var _super3 = _createSuper(AnimatedObjectWithChildren);

    function AnimatedObjectWithChildren() {
        var _this5;

        _classCallCheck(this, AnimatedObjectWithChildren);

        _this5 = _super3.apply(this, arguments);
        _this5.payload = {};

        _this5.getAnimatedValue = function() {
            return _this5.getValue(true);
        };

        _this5.attach = function() {
            return getValues(_this5.payload).forEach(function(s) {
                return s instanceof Animated && s.addChild(_assertThisInitialized(_this5));
            });
        };

        _this5.detach = function() {
            return getValues(_this5.payload).forEach(function(s) {
                return s instanceof Animated && s.removeChild(_assertThisInitialized(_this5));
            });
        };

        return _this5;
    }

    _createClass(AnimatedObjectWithChildren, [{
        key: "getValue",
        value: function getValue(animated) {
            if (animated === void 0) {
                animated = false;
            }

            var payload = {};

            for (var key in this.payload) {
                var value = this.payload[key];
                if (animated && !(value instanceof Animated)) continue;
                payload[key] = value instanceof Animated ? value[animated ? 'getAnimatedValue' : 'getValue']() : value;
            }

            return payload;
        }
    }]);

    return AnimatedObjectWithChildren;
}(AnimatedWithChildren);

var AnimatedStyle = /*#__PURE__*/ function(_AnimatedObjectWithCh) {
    _inherits(AnimatedStyle, _AnimatedObjectWithCh);

    var _super4 = _createSuper(AnimatedStyle);

    function AnimatedStyle(style) {
        var _this6;

        _classCallCheck(this, AnimatedStyle);

        _this6 = _super4.call(this);
        style = style || {};
        if (style.transform && !(style.transform instanceof Animated)) style = applyAnimatedValues.transform(style);
        _this6.payload = style;
        return _this6;
    }

    return AnimatedStyle;
}(AnimatedObjectWithChildren); // http://www.w3.org/TR/css3-color/#svg-color


var colors = {
    transparent: 0x00000000,
    aliceblue: 0xf0f8ffff,
    antiquewhite: 0xfaebd7ff,
    aqua: 0x00ffffff,
    aquamarine: 0x7fffd4ff,
    azure: 0xf0ffffff,
    beige: 0xf5f5dcff,
    bisque: 0xffe4c4ff,
    black: 0x000000ff,
    blanchedalmond: 0xffebcdff,
    blue: 0x0000ffff,
    blueviolet: 0x8a2be2ff,
    brown: 0xa52a2aff,
    burlywood: 0xdeb887ff,
    burntsienna: 0xea7e5dff,
    cadetblue: 0x5f9ea0ff,
    chartreuse: 0x7fff00ff,
    chocolate: 0xd2691eff,
    coral: 0xff7f50ff,
    cornflowerblue: 0x6495edff,
    cornsilk: 0xfff8dcff,
    crimson: 0xdc143cff,
    cyan: 0x00ffffff,
    darkblue: 0x00008bff,
    darkcyan: 0x008b8bff,
    darkgoldenrod: 0xb8860bff,
    darkgray: 0xa9a9a9ff,
    darkgreen: 0x006400ff,
    darkgrey: 0xa9a9a9ff,
    darkkhaki: 0xbdb76bff,
    darkmagenta: 0x8b008bff,
    darkolivegreen: 0x556b2fff,
    darkorange: 0xff8c00ff,
    darkorchid: 0x9932ccff,
    darkred: 0x8b0000ff,
    darksalmon: 0xe9967aff,
    darkseagreen: 0x8fbc8fff,
    darkslateblue: 0x483d8bff,
    darkslategray: 0x2f4f4fff,
    darkslategrey: 0x2f4f4fff,
    darkturquoise: 0x00ced1ff,
    darkviolet: 0x9400d3ff,
    deeppink: 0xff1493ff,
    deepskyblue: 0x00bfffff,
    dimgray: 0x696969ff,
    dimgrey: 0x696969ff,
    dodgerblue: 0x1e90ffff,
    firebrick: 0xb22222ff,
    floralwhite: 0xfffaf0ff,
    forestgreen: 0x228b22ff,
    fuchsia: 0xff00ffff,
    gainsboro: 0xdcdcdcff,
    ghostwhite: 0xf8f8ffff,
    gold: 0xffd700ff,
    goldenrod: 0xdaa520ff,
    gray: 0x808080ff,
    green: 0x008000ff,
    greenyellow: 0xadff2fff,
    grey: 0x808080ff,
    honeydew: 0xf0fff0ff,
    hotpink: 0xff69b4ff,
    indianred: 0xcd5c5cff,
    indigo: 0x4b0082ff,
    ivory: 0xfffff0ff,
    khaki: 0xf0e68cff,
    lavender: 0xe6e6faff,
    lavenderblush: 0xfff0f5ff,
    lawngreen: 0x7cfc00ff,
    lemonchiffon: 0xfffacdff,
    lightblue: 0xadd8e6ff,
    lightcoral: 0xf08080ff,
    lightcyan: 0xe0ffffff,
    lightgoldenrodyellow: 0xfafad2ff,
    lightgray: 0xd3d3d3ff,
    lightgreen: 0x90ee90ff,
    lightgrey: 0xd3d3d3ff,
    lightpink: 0xffb6c1ff,
    lightsalmon: 0xffa07aff,
    lightseagreen: 0x20b2aaff,
    lightskyblue: 0x87cefaff,
    lightslategray: 0x778899ff,
    lightslategrey: 0x778899ff,
    lightsteelblue: 0xb0c4deff,
    lightyellow: 0xffffe0ff,
    lime: 0x00ff00ff,
    limegreen: 0x32cd32ff,
    linen: 0xfaf0e6ff,
    magenta: 0xff00ffff,
    maroon: 0x800000ff,
    mediumaquamarine: 0x66cdaaff,
    mediumblue: 0x0000cdff,
    mediumorchid: 0xba55d3ff,
    mediumpurple: 0x9370dbff,
    mediumseagreen: 0x3cb371ff,
    mediumslateblue: 0x7b68eeff,
    mediumspringgreen: 0x00fa9aff,
    mediumturquoise: 0x48d1ccff,
    mediumvioletred: 0xc71585ff,
    midnightblue: 0x191970ff,
    mintcream: 0xf5fffaff,
    mistyrose: 0xffe4e1ff,
    moccasin: 0xffe4b5ff,
    navajowhite: 0xffdeadff,
    navy: 0x000080ff,
    oldlace: 0xfdf5e6ff,
    olive: 0x808000ff,
    olivedrab: 0x6b8e23ff,
    orange: 0xffa500ff,
    orangered: 0xff4500ff,
    orchid: 0xda70d6ff,
    palegoldenrod: 0xeee8aaff,
    palegreen: 0x98fb98ff,
    paleturquoise: 0xafeeeeff,
    palevioletred: 0xdb7093ff,
    papayawhip: 0xffefd5ff,
    peachpuff: 0xffdab9ff,
    peru: 0xcd853fff,
    pink: 0xffc0cbff,
    plum: 0xdda0ddff,
    powderblue: 0xb0e0e6ff,
    purple: 0x800080ff,
    rebeccapurple: 0x663399ff,
    red: 0xff0000ff,
    rosybrown: 0xbc8f8fff,
    royalblue: 0x4169e1ff,
    saddlebrown: 0x8b4513ff,
    salmon: 0xfa8072ff,
    sandybrown: 0xf4a460ff,
    seagreen: 0x2e8b57ff,
    seashell: 0xfff5eeff,
    sienna: 0xa0522dff,
    silver: 0xc0c0c0ff,
    skyblue: 0x87ceebff,
    slateblue: 0x6a5acdff,
    slategray: 0x708090ff,
    slategrey: 0x708090ff,
    snow: 0xfffafaff,
    springgreen: 0x00ff7fff,
    steelblue: 0x4682b4ff,
    tan: 0xd2b48cff,
    teal: 0x008080ff,
    thistle: 0xd8bfd8ff,
    tomato: 0xff6347ff,
    turquoise: 0x40e0d0ff,
    violet: 0xee82eeff,
    wheat: 0xf5deb3ff,
    white: 0xffffffff,
    whitesmoke: 0xf5f5f5ff,
    yellow: 0xffff00ff,
    yellowgreen: 0x9acd32ff
};

var Interpolation = /*#__PURE__*/ function() {
    function Interpolation() {
        _classCallCheck(this, Interpolation);
    }

    _createClass(Interpolation, null, [{
        key: "create",
        value: // Default config = config, args
            // Short config   = range, output, extrapolate
            function create(config, output, extra) {
                if (typeof config === 'function') return config;
                else if (interpolation && config.output && typeof config.output[0] === 'string') return interpolation(config);
                else if (Array.isArray(config)) return Interpolation.create({
                    range: config,
                    output: output,
                    extrapolate: extra || 'extend'
                });
                var outputRange = config.output;
                var inputRange = config.range || [0, 1];

                var easing = config.easing || function(t) {
                    return t;
                };

                var extrapolateLeft = 'extend';
                var map = config.map;
                if (config.extrapolateLeft !== undefined) extrapolateLeft = config.extrapolateLeft;
                else if (config.extrapolate !== undefined) extrapolateLeft = config.extrapolate;
                var extrapolateRight = 'extend';
                if (config.extrapolateRight !== undefined) extrapolateRight = config.extrapolateRight;
                else if (config.extrapolate !== undefined) extrapolateRight = config.extrapolate;
                return function(input) {
                    var range = findRange(input, inputRange);
                    return interpolate(input, inputRange[range], inputRange[range + 1], outputRange[range], outputRange[range + 1], easing, extrapolateLeft, extrapolateRight, map);
                };
            }
    }]);

    return Interpolation;
}();

function interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight, map) {
    var result = map ? map(input) : input; // Extrapolate

    if (result < inputMin) {
        if (extrapolateLeft === 'identity') return result;
        else if (extrapolateLeft === 'clamp') result = inputMin;
    }

    if (result > inputMax) {
        if (extrapolateRight === 'identity') return result;
        else if (extrapolateRight === 'clamp') result = inputMax;
    }

    if (outputMin === outputMax) return outputMin;
    if (inputMin === inputMax) return input <= inputMin ? outputMin : outputMax; // Input Range

    if (inputMin === -Infinity) result = -result;
    else if (inputMax === Infinity) result = result - inputMin;
    else result = (result - inputMin) / (inputMax - inputMin); // Easing

    result = easing(result); // Output Range

    if (outputMin === -Infinity) result = -result;
    else if (outputMax === Infinity) result = result + outputMin;
    else result = result * (outputMax - outputMin) + outputMin;
    return result;
}

function findRange(input, inputRange) {
    for (var i = 1; i < inputRange.length - 1; ++i) {
        if (inputRange[i] >= input) break;
    }

    return i - 1;
} // const INTEGER = '[-+]?\\d+';


var NUMBER = '[-+]?\\d*\\.?\\d+';
var PERCENTAGE = NUMBER + '%';

function call() {
    return '\\(\\s*(' + Array.prototype.slice.call(arguments).join(')\\s*,\\s*(') + ')\\s*\\)';
}

var rgb = new RegExp('rgb' + call(NUMBER, NUMBER, NUMBER));
var rgba = new RegExp('rgba' + call(NUMBER, NUMBER, NUMBER, NUMBER));
var hsl = new RegExp('hsl' + call(NUMBER, PERCENTAGE, PERCENTAGE));
var hsla = new RegExp('hsla' + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER));
var hex3 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;
var hex4 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;
var hex6 = /^#([0-9a-fA-F]{6})$/;
var hex8 = /^#([0-9a-fA-F]{8})$/;
/*
https://github.com/react-community/normalize-css-color

BSD 3-Clause License

Copyright (c) 2016, React Community
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

* Neither the name of the copyright holder nor the names of its
  contributors may be used to endorse or promote products derived from
  this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

function normalizeColor(color) {
    var match;

    if (typeof color === 'number') {
        return color >>> 0 === color && color >= 0 && color <= 0xffffffff ? color : null;
    } // Ordered based on occurrences on Facebook codebase


    if (match = hex6.exec(color)) return parseInt(match[1] + 'ff', 16) >>> 0;
    if (colors.hasOwnProperty(color)) return colors[color];

    if (match = rgb.exec(color)) {
        return (parse255(match[1]) << 24 | // r
                parse255(match[2]) << 16 | // g
                parse255(match[3]) << 8 | // b
                0x000000ff) >>> // a
            0;
    }

    if (match = rgba.exec(color)) {
        return (parse255(match[1]) << 24 | // r
                parse255(match[2]) << 16 | // g
                parse255(match[3]) << 8 | // b
                parse1(match[4])) >>> // a
            0;
    }

    if (match = hex3.exec(color)) {
        return parseInt(match[1] + match[1] + // r
            match[2] + match[2] + // g
            match[3] + match[3] + // b
            'ff', // a
            16) >>> 0;
    } // https://drafts.csswg.org/css-color-4/#hex-notation


    if (match = hex8.exec(color)) return parseInt(match[1], 16) >>> 0;

    if (match = hex4.exec(color)) {
        return parseInt(match[1] + match[1] + // r
            match[2] + match[2] + // g
            match[3] + match[3] + // b
            match[4] + match[4], // a
            16) >>> 0;
    }

    if (match = hsl.exec(color)) {
        return (hslToRgb(parse360(match[1]), // h
                parsePercentage(match[2]), // s
                parsePercentage(match[3]) // l
            ) | 0x000000ff) >>> // a
            0;
    }

    if (match = hsla.exec(color)) {
        return (hslToRgb(parse360(match[1]), // h
                parsePercentage(match[2]), // s
                parsePercentage(match[3]) // l
            ) | parse1(match[4])) >>> // a
            0;
    }

    return null;
}

function hue2rgb(p, q, t) {
    if (t < 0) t += 1;
    if (t > 1) t -= 1;
    if (t < 1 / 6) return p + (q - p) * 6 * t;
    if (t < 1 / 2) return q;
    if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
    return p;
}

function hslToRgb(h, s, l) {
    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
    var p = 2 * l - q;
    var r = hue2rgb(p, q, h + 1 / 3);
    var g = hue2rgb(p, q, h);
    var b = hue2rgb(p, q, h - 1 / 3);
    return Math.round(r * 255) << 24 | Math.round(g * 255) << 16 | Math.round(b * 255) << 8;
}

function parse255(str) {
    var int = parseInt(str, 10);
    if (int < 0) return 0;
    if (int > 255) return 255;
    return int;
}

function parse360(str) {
    var int = parseFloat(str);
    return (int % 360 + 360) % 360 / 360;
}

function parse1(str) {
    var num = parseFloat(str);
    if (num < 0) return 0;
    if (num > 1) return 255;
    return Math.round(num * 255);
}

function parsePercentage(str) {
    // parseFloat conveniently ignores the final %
    var int = parseFloat(str);
    if (int < 0) return 0;
    if (int > 100) return 1;
    return int / 100;
}

function colorToRgba(input) {
    var int32Color = normalizeColor(input);
    if (int32Color === null) return input;
    int32Color = int32Color || 0;
    var r = (int32Color & 0xff000000) >>> 24;
    var g = (int32Color & 0x00ff0000) >>> 16;
    var b = (int32Color & 0x0000ff00) >>> 8;
    var a = (int32Color & 0x000000ff) / 255;
    return "rgba(".concat(r, ", ").concat(g, ", ").concat(b, ", ").concat(a, ")");
} // Problem: https://github.com/animatedjs/animated/pull/102
// Solution: https://stackoverflow.com/questions/638565/parsing-scientific-notation-sensibly/658662


var stringShapeRegex = /[+\-]?(?:0|[1-9]\d*)(?:\.\d*)?(?:[eE][+\-]?\d+)?/g; // Covers rgb, rgba, hsl, hsla
// Taken from https://gist.github.com/olmokramer/82ccce673f86db7cda5e

var colorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\((-?\d+%?[,\s]+){2,3}\s*[\d\.]+%?\))/gi; // Covers color names (transparent, blue, etc.)

var colorNamesRegex = new RegExp("(".concat(Object.keys(colors).join('|'), ")"), 'g');
/**
 * Supports string shapes by extracting numbers so new values can be computed,
 * and recombines those values into new strings of the same shape.  Supports
 * things like:
 *
 *   rgba(123, 42, 99, 0.36)           // colors
 *   -45deg                            // values with units
 *   0 2px 2px 0px rgba(0, 0, 0, 0.12) // box shadows
 */

function createInterpolation(config) {
    // Replace colors with rgba
    var outputRange = config.output.map(function(rangeValue) {
        return rangeValue.replace(colorRegex, colorToRgba);
    }).map(function(rangeValue) {
        return rangeValue.replace(colorNamesRegex, colorToRgba);
    }); // ->
    // [
    //   [0, 50],
    //   [100, 150],
    //   [200, 250],
    //   [0, 0.5],
    // ]

    var outputRanges = outputRange[0].match(stringShapeRegex).map(function() {
        return [];
    });
    outputRange.forEach(function(value) {
        value.match(stringShapeRegex).forEach(function(number, i) {
            return outputRanges[i].push(+number);
        });
    });
    var interpolations = outputRange[0].match(stringShapeRegex).map(function(value, i) {
        return Interpolation.create(_extends({}, config, {
            output: outputRanges[i]
        }));
    });
    return function(input) {
        var i = 0;
        return outputRange[0] // 'rgba(0, 100, 200, 0)'
            // ->
            // 'rgba(${interpolations[0](input)}, ${interpolations[1](input)}, ...'
            .replace(stringShapeRegex, function() {
                return interpolations[i++](input);
            }) // rgba requires that the r,g,b are integers.... so we want to round them, but we *dont* want to
            // round the opacity (4th column).
            .replace(/rgba\(([0-9\.-]+), ([0-9\.-]+), ([0-9\.-]+), ([0-9\.-]+)\)/gi, function(_, p1, p2, p3, p4) {
                return "rgba(".concat(Math.round(p1), ", ").concat(Math.round(p2), ", ").concat(Math.round(p3), ", ").concat(p4, ")");
            });
    };
}

var AnimatedInterpolation = /*#__PURE__*/ function(_AnimatedArrayWithChi) {
    _inherits(AnimatedInterpolation, _AnimatedArrayWithChi);

    var _super5 = _createSuper(AnimatedInterpolation);

    function AnimatedInterpolation(parents, _config, _arg) {
        var _this7;

        _classCallCheck(this, AnimatedInterpolation);

        _this7 = _super5.call(this);

        _this7.getValue = function() {
            var _this8;

            return (_this8 = _this7).calc.apply(_this8, _toConsumableArray(_this7.payload.map(function(value) {
                return value.getValue();
            })));
        };

        _this7.updateConfig = function(config, arg) {
            return _this7.calc = Interpolation.create(config, arg);
        };

        _this7.interpolate = function(config, arg) {
            return new AnimatedInterpolation(_assertThisInitialized(_this7), config, arg);
        };

        _this7.payload = // AnimatedArrays should unfold, except AnimatedInterpolation which is taken as is
            parents instanceof AnimatedArrayWithChildren && !parents.updateConfig ? parents.payload : Array.isArray(parents) ? parents : [parents];
        _this7.calc = Interpolation.create(_config, _arg);
        return _this7;
    }

    return AnimatedInterpolation;
}(AnimatedArrayWithChildren);

var interpolate$1 = function interpolate$1(parents, config, arg) {
    return parents && new AnimatedInterpolation(parents, config, arg);
};
/**
 * Animated works by building a directed acyclic graph of dependencies
 * transparently when you render your Animated components.
 *
 *               new Animated.Value(0)
 *     .interpolate()        .interpolate()    new Animated.Value(1)
 *         opacity               translateY      scale
 *          style                         transform
 *         View#234                         style
 *                                         View#123
 *
 * A) Top Down phase
 * When an Animated.Value is updated, we recursively go down through this
 * graph in order to find leaf nodes: the views that we flag as needing
 * an update.
 *
 * B) Bottom Up phase
 * When a view is flagged as needing an update, we recursively go back up
 * in order to build the new value that it needs. The reason why we need
 * this two-phases process is to deal with composite props such as
 * transform which can receive values from multiple parents.
 */


function findAnimatedStyles(node, styles) {
    if (typeof node.update === 'function') styles.add(node);
    else node.getChildren().forEach(function(child) {
        return findAnimatedStyles(child, styles);
    });
}
/**
 * Standard value for driving animations.  One `Animated.Value` can drive
 * multiple properties in a synchronized fashion, but can only be driven by one
 * mechanism at a time.  Using a new mechanism (e.g. starting a new animation,
 * or calling `setValue`) will stop any previous ones.
 */


var AnimatedValue = /*#__PURE__*/ function(_AnimatedWithChildren3) {
    _inherits(AnimatedValue, _AnimatedWithChildren3);

    var _super6 = _createSuper(AnimatedValue);

    function AnimatedValue(_value) {
        var _this9;

        _classCallCheck(this, AnimatedValue);

        var _this;

        _this9 = _super6.call(this);
        _this = _assertThisInitialized(_this9);

        _this9.setValue = function(value, flush) {
            if (flush === void 0) {
                flush = true;
            }

            _this.value = value;
            if (flush) _this.flush();
        };

        _this9.getValue = function() {
            return _this9.value;
        };

        _this9.updateStyles = function() {
            return findAnimatedStyles(_assertThisInitialized(_this9), _this9.animatedStyles);
        };

        _this9.updateValue = function(value) {
            return _this9.flush(_this9.value = value);
        };

        _this9.interpolate = function(config, arg) {
            return new AnimatedInterpolation(_assertThisInitialized(_this9), config, arg);
        };

        _this9.value = _value;
        _this9.animatedStyles = new Set();
        _this9.done = false;
        _this9.startPosition = _value;
        _this9.lastPosition = _value;
        _this9.lastVelocity = undefined;
        _this9.lastTime = undefined;
        _this9.controller = undefined;
        return _this9;
    }

    _createClass(AnimatedValue, [{
        key: "flush",
        value: function flush() {
            if (this.animatedStyles.size === 0) this.updateStyles();
            this.animatedStyles.forEach(function(animatedStyle) {
                return animatedStyle.update();
            });
        }
    }, {
        key: "prepare",
        value: function prepare(controller) {
            // Values stay loyal to their original controller, this is also a way to
            // detect trailing values originating from a foreign controller
            if (this.controller === undefined) this.controller = controller;

            if (this.controller === controller) {
                this.startPosition = this.value;
                this.lastPosition = this.value;
                this.lastVelocity = controller.isActive ? this.lastVelocity : undefined;
                this.lastTime = controller.isActive ? this.lastTime : undefined;
                this.done = false;
                this.animatedStyles.clear();
            }
        }
    }]);

    return AnimatedValue;
}(AnimatedWithChildren);

var AnimatedArray = /*#__PURE__*/ function(_AnimatedArrayWithChi2) {
    _inherits(AnimatedArray, _AnimatedArrayWithChi2);

    var _super7 = _createSuper(AnimatedArray);

    function AnimatedArray(array) {
        var _this10;

        _classCallCheck(this, AnimatedArray);

        var _this;

        _this10 = _super7.call(this);
        _this = _assertThisInitialized(_this10);

        _this10.setValue = function(value, flush) {
            if (flush === void 0) {
                flush = true;
            }

            if (Array.isArray(value)) {
                if (value.length === _this.payload.length) value.forEach(function(v, i) {
                    return _this.payload[i].setValue(v, flush);
                });
            } else _this.payload.forEach(function(v, i) {
                return _this.payload[i].setValue(value, flush);
            });
        };

        _this10.getValue = function() {
            return _this10.payload.map(function(v) {
                return v.getValue();
            });
        };

        _this10.interpolate = function(config, arg) {
            return new AnimatedInterpolation(_assertThisInitialized(_this10), config, arg);
        };

        _this10.payload = array.map(function(n) {
            return new AnimatedValue(n);
        });
        return _this10;
    }

    return AnimatedArray;
}(AnimatedArrayWithChildren);

function withDefault(value, defaultValue) {
    return value === undefined || value === null ? defaultValue : value;
}

function toArray(a) {
    return a !== void 0 ? Array.isArray(a) ? a : [a] : [];
}

function shallowEqual(a, b) {
    if (typeof a !== typeof b) return false;
    if (typeof a === 'string' || typeof a === 'number') return a === b;
    var i;

    for (i in a) {
        if (!(i in b)) return false;
    }

    for (i in b) {
        if (a[i] !== b[i]) return false;
    }

    return i === void 0 ? a === b : true;
}

function callProp(obj) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
    }

    return typeof obj === 'function' ? obj.apply(void 0, args) : obj;
}

function getValues$1(object) {
    return Object.keys(object).map(function(k) {
        return object[k];
    });
}

function getForwardProps(props) {
    var to = props.to,
        from = props.from,
        config = props.config,
        native = props.native,
        onStart = props.onStart,
        onRest = props.onRest,
        onFrame = props.onFrame,
        children = props.children,
        reset = props.reset,
        reverse = props.reverse,
        force = props.force,
        immediate = props.immediate,
        impl = props.impl,
        inject = props.inject,
        delay = props.delay,
        attach = props.attach,
        destroyed = props.destroyed,
        interpolateTo = props.interpolateTo,
        autoStart = props.autoStart,
        ref = props.ref,
        forward = _objectWithoutPropertiesLoose(props, ["to", "from", "config", "native", "onStart", "onRest", "onFrame", "children", "reset", "reverse", "force", "immediate", "impl", "inject", "delay", "attach", "destroyed", "interpolateTo", "autoStart", "ref"]);

    return forward;
}

function interpolateTo(props) {
    var forward = getForwardProps(props);
    var rest = Object.keys(props).reduce(function(a, k) {
        return forward[k] !== void 0 ? a : _extends({}, a, _defineProperty({}, k, props[k]));
    }, {});
    return _extends({
        to: forward
    }, rest);
}

function convertToAnimatedValue(acc, _ref) {
    var name = _ref[0],
        value = _ref[1];
    return _extends({}, acc, _defineProperty({}, name, new(Array.isArray(value) ? AnimatedArray : AnimatedValue)(value)));
}

function convertValues(props) {
    var from = props.from,
        to = props.to,
        native = props.native;
    var allProps = Object.entries(_extends({}, from, to));
    return native ? allProps.reduce(convertToAnimatedValue, {}) : _extends({}, from, to);
}

function handleRef(ref, forward) {
    if (forward) {
        // If it's a function, assume it's a ref callback
        if (typeof forward === 'function') forward(ref);
        else if (typeof forward === 'object') {
            // If it's an object and has a 'current' property, assume it's a ref object
            forward.current = ref;
        }
    }

    return ref;
}

var check = function check(value) {
    return value === 'auto';
};

var overwrite = function overwrite(width, height) {
    return function(acc, _ref) {
        var name = _ref[0],
            value = _ref[1];
        return _extends({}, acc, _defineProperty({}, name, value === 'auto' ? ~name.indexOf('height') ? height : width : value));
    };
};

function fixAuto(props, callback) {
    var from = props.from,
        to = props.to,
        children = props.children; // Dry-route props back if nothing's using 'auto' in there
    // TODO: deal with "null"

    if (!(getValues$1(to).some(check) || getValues$1(from).some(check))) return; // Fetch render v-dom

    var element = children(convertValues(props)); // A spring can return undefined/null, check against that (#153)

    if (!element) return; // Or it could be an array (#346) ...

    if (Array.isArray(element)) element = {
        type: 'div',
        props: {
            children: element
        } // Extract styles

    };
    var elementStyles = element.props.style; // Return v.dom with injected ref

    return React__default.createElement(element.type, _extends({
        key: element.key ? element.key : undefined
    }, element.props, {
        style: _extends({}, elementStyles, {
            position: 'absolute',
            visibility: 'hidden'
        }),
        ref: function ref(_ref2) {
            if (_ref2) {
                // Once it's rendered out, fetch bounds (minus padding/margin/borders)
                var node = ReactDOM.findDOMNode(_ref2);
                var width, height;
                var cs = getComputedStyle(node);

                if (cs.boxSizing === 'border-box') {
                    width = node.offsetWidth;
                    height = node.offsetHeight;
                } else {
                    var paddingX = parseFloat(cs.paddingLeft || 0) + parseFloat(cs.paddingRight || 0);
                    var paddingY = parseFloat(cs.paddingTop || 0) + parseFloat(cs.paddingBottom || 0);
                    var borderX = parseFloat(cs.borderLeftWidth || 0) + parseFloat(cs.borderRightWidth || 0);
                    var borderY = parseFloat(cs.borderTopWidth || 0) + parseFloat(cs.borderBottomWidth || 0);
                    width = node.offsetWidth - paddingX - borderX;
                    height = node.offsetHeight - paddingY - borderY;
                }

                var convert = overwrite(width, height);
                callback(_extends({}, props, {
                    from: Object.entries(from).reduce(convert, from),
                    to: Object.entries(to).reduce(convert, to)
                }));
            }
        }
    }));
}

var isUnitlessNumber = {
    animationIterationCount: true,
    borderImageOutset: true,
    borderImageSlice: true,
    borderImageWidth: true,
    boxFlex: true,
    boxFlexGroup: true,
    boxOrdinalGroup: true,
    columnCount: true,
    columns: true,
    flex: true,
    flexGrow: true,
    flexPositive: true,
    flexShrink: true,
    flexNegative: true,
    flexOrder: true,
    gridRow: true,
    gridRowEnd: true,
    gridRowSpan: true,
    gridRowStart: true,
    gridColumn: true,
    gridColumnEnd: true,
    gridColumnSpan: true,
    gridColumnStart: true,
    fontWeight: true,
    lineClamp: true,
    lineHeight: true,
    opacity: true,
    order: true,
    orphans: true,
    tabSize: true,
    widows: true,
    zIndex: true,
    zoom: true,
    // SVG-related properties
    fillOpacity: true,
    floodOpacity: true,
    stopOpacity: true,
    strokeDasharray: true,
    strokeDashoffset: true,
    strokeMiterlimit: true,
    strokeOpacity: true,
    strokeWidth: true
};

var prefixKey = function prefixKey(prefix, key) {
    return prefix + key.charAt(0).toUpperCase() + key.substring(1);
};

var prefixes = ['Webkit', 'Ms', 'Moz', 'O'];
isUnitlessNumber = Object.keys(isUnitlessNumber).reduce(function(acc, prop) {
    prefixes.forEach(function(prefix) {
        return acc[prefixKey(prefix, prop)] = acc[prop];
    });
    return acc;
}, isUnitlessNumber);

function dangerousStyleValue(name, value, isCustomProperty) {
    if (value == null || typeof value === 'boolean' || value === '') return '';
    if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers

    return ('' + value).trim();
}

var attributeCache = {};
injectCreateAnimatedStyle(function(style) {
    return new AnimatedStyle(style);
});
injectDefaultElement('div');
injectInterpolation(createInterpolation);
injectColorNames(colors);
injectBugfixes(fixAuto);
injectApplyAnimatedValues(function(instance, props) {
    if (instance.nodeType && instance.setAttribute !== undefined) {
        var style = props.style,
            children = props.children,
            scrollTop = props.scrollTop,
            scrollLeft = props.scrollLeft,
            attributes = _objectWithoutPropertiesLoose(props, ["style", "children", "scrollTop", "scrollLeft"]);

        if (scrollTop !== void 0) instance.scrollTop = scrollTop;
        if (scrollLeft !== void 0) instance.scrollLeft = scrollLeft; // Set textContent, if children is an animatable value

        if (children !== void 0) instance.textContent = children; // Set styles ...

        for (var styleName in style) {
            if (!style.hasOwnProperty(styleName)) continue;
            var isCustomProperty = styleName.indexOf('--') === 0;
            var styleValue = dangerousStyleValue(styleName, style[styleName], isCustomProperty);
            if (styleName === 'float') styleName = 'cssFloat';
            if (isCustomProperty) instance.style.setProperty(styleName, styleValue);
            else instance.style[styleName] = styleValue;
        } // Set attributes ...


        for (var name in attributes) {
            // Attributes are written in dash case
            var dashCase = attributeCache[name] || (attributeCache[name] = name.replace(/([A-Z])/g, function(n) {
                return '-' + n.toLowerCase();
            }));
            if (typeof instance.getAttribute(dashCase) !== 'undefined') instance.setAttribute(dashCase, attributes[name]);
        }
    } else return false;
}, function(style) {
    return style;
});
var active = false;
var controllers = new Set();

var frameLoop = function frameLoop() {
    var time = now();

    var _iterator = _createForOfIteratorHelper(controllers),
        _step;

    try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var controller = _step.value;
            var isDone = true;
            var noChange = true;

            for (var configIdx = 0; configIdx < controller.configs.length; configIdx++) {
                var _config2 = controller.configs[configIdx];
                var endOfAnimation = void 0,
                    lastTime = void 0;

                for (var valIdx = 0; valIdx < _config2.animatedValues.length; valIdx++) {
                    var animation = _config2.animatedValues[valIdx]; // If an animation is done, skip, until all of them conclude

                    if (animation.done) continue;
                    var from = _config2.fromValues[valIdx];
                    var to = _config2.toValues[valIdx];
                    var position = animation.lastPosition;
                    var isAnimated = to instanceof Animated;
                    var velocity = Array.isArray(_config2.initialVelocity) ? _config2.initialVelocity[valIdx] : _config2.initialVelocity;
                    if (isAnimated) to = to.getValue(); // Conclude animation if it's either immediate, or from-values match end-state

                    if (_config2.immediate || !isAnimated && !_config2.decay && from === to) {
                        animation.updateValue(to);
                        animation.done = true;
                        continue;
                    } // Doing delay here instead of setTimeout is one async worry less


                    if (_config2.delay && time - controller.startTime < _config2.delay) {
                        isDone = false;
                        continue;
                    } // Flag change


                    noChange = false; // Break animation when string values are involved

                    if (typeof from === 'string' || typeof to === 'string') {
                        animation.updateValue(to);
                        animation.done = true;
                        continue;
                    }

                    if (_config2.duration !== void 0) {
                        /** Duration easing */
                        position = from + _config2.easing((time - controller.startTime - _config2.delay) / _config2.duration) * (to - from);
                        endOfAnimation = time >= controller.startTime + _config2.delay + _config2.duration;
                    } else if (_config2.decay) {
                        /** Decay easing */
                        position = from + velocity / (1 - 0.998) * (1 - Math.exp(-(1 - 0.998) * (time - controller.startTime)));
                        endOfAnimation = Math.abs(animation.lastPosition - position) < 0.1;
                        if (endOfAnimation) to = position;
                    } else {
                        /** Spring easing */
                        lastTime = animation.lastTime !== void 0 ? animation.lastTime : time;
                        velocity = animation.lastVelocity !== void 0 ? animation.lastVelocity : _config2.initialVelocity; // If we lost a lot of frames just jump to the end.

                        if (time > lastTime + 64) lastTime = time; // http://gafferongames.com/game-physics/fix-your-timestep/

                        var numSteps = Math.floor(time - lastTime);

                        for (var i = 0; i < numSteps; ++i) {
                            var force = -_config2.tension * (position - to);
                            var damping = -_config2.friction * velocity;
                            var acceleration = (force + damping) / _config2.mass;
                            velocity = velocity + acceleration * 1 / 1000;
                            position = position + velocity * 1 / 1000;
                        } // Conditions for stopping the spring animation


                        var isOvershooting = _config2.clamp && _config2.tension !== 0 ? from < to ? position > to : position < to : false;

                        var isVelocity = Math.abs(velocity) <= _config2.precision;

                        var isDisplacement = _config2.tension !== 0 ? Math.abs(to - position) <= _config2.precision : true;
                        endOfAnimation = isOvershooting || isVelocity && isDisplacement;
                        animation.lastVelocity = velocity;
                        animation.lastTime = time;
                    } // Trails aren't done until their parents conclude


                    if (isAnimated && !_config2.toValues[valIdx].done) endOfAnimation = false;

                    if (endOfAnimation) {
                        // Ensure that we end up with a round value
                        if (animation.value !== to) position = to;
                        animation.done = true;
                    } else isDone = false;

                    animation.updateValue(position);
                    animation.lastPosition = position;
                } // Keep track of updated values only when necessary


                if (controller.props.onFrame || !controller.props.native) controller.animatedProps[_config2.name] = _config2.interpolation.getValue();
            } // Update callbacks in the end of the frame


            if (controller.props.onFrame || !controller.props.native) {
                if (!controller.props.native && controller.onUpdate) controller.onUpdate();
                if (controller.props.onFrame) controller.props.onFrame(controller.animatedProps);
            } // Either call onEnd or next frame


            if (isDone) {
                controllers.delete(controller);
                controller.debouncedOnEnd({
                    finished: true,
                    noChange: noChange
                });
            }
        } // Loop over as long as there are controllers ...

    } catch (err) {
        _iterator.e(err);
    } finally {
        _iterator.f();
    }

    if (controllers.size) requestFrame(frameLoop);
    else active = false;
};

var addController = function addController(controller) {
    if (!controllers.has(controller)) {
        controllers.add(controller);
        if (!active) requestFrame(frameLoop);
        active = true;
    }
};

var removeController = function removeController(controller) {
    if (controllers.has(controller)) {
        controllers.delete(controller);
    }
};

var Controller = /*#__PURE__*/ function() {
    function Controller(props, config) {
        var _this11 = this;

        _classCallCheck(this, Controller);

        if (config === void 0) {
            config = {
                native: true,
                interpolateTo: true,
                autoStart: true
            };
        }

        this.getValues = function() {
            return _this11.props.native ? _this11.interpolations : _this11.animatedProps;
        };

        this.dependents = new Set();
        this.isActive = false;
        this.hasChanged = false;
        this.props = {};
        this.merged = {};
        this.animations = {};
        this.interpolations = {};
        this.animatedProps = {};
        this.configs = [];
        this.frame = undefined;
        this.startTime = undefined;
        this.lastTime = undefined;
        this.update(_extends({}, props, config));
    }

    _createClass(Controller, [{
        key: "update",
        value: function update(props) {
            var _this12 = this;

            this.props = _extends({}, this.props, props);

            var _ref = this.props.interpolateTo ? interpolateTo(this.props) : this.props,
                _ref$from = _ref.from,
                from = _ref$from === void 0 ? {} : _ref$from,
                _ref$to = _ref.to,
                to = _ref$to === void 0 ? {} : _ref$to,
                _ref$config = _ref.config,
                config = _ref$config === void 0 ? {} : _ref$config,
                _ref$delay = _ref.delay,
                delay = _ref$delay === void 0 ? 0 : _ref$delay,
                reverse = _ref.reverse,
                attach = _ref.attach,
                reset = _ref.reset,
                immediate = _ref.immediate,
                autoStart = _ref.autoStart,
                ref = _ref.ref; // Reverse values when requested


            if (reverse) {
                var _ref2 = [to, from];
                from = _ref2[0];
                to = _ref2[1];
            }

            this.hasChanged = false; // Attachment handling, trailed springs can "attach" themselves to a previous spring

            var target = attach && attach(this); // Reset merged props when necessary

            var extra = reset ? {} : this.merged; // This will collect all props that were ever set

            this.merged = _extends({}, from, extra, to); // Reduces input { name: value } pairs into animated values

            this.animations = Object.entries(this.merged).reduce(function(acc, _ref3, i) {
                var name = _ref3[0],
                    value = _ref3[1]; // Issue cached entries, except on reset

                var entry = !reset && acc[name] || {}; // Figure out what the value is supposed to be

                var isNumber = typeof value === 'number';
                var isString = typeof value === 'string' && !value.startsWith('#') && !/\d/.test(value) && !colorNames[value];
                var isArray = !isNumber && !isString && Array.isArray(value);
                var fromValue = from[name] !== undefined ? from[name] : value;
                var toValue = isNumber || isArray ? value : isString ? value : 1;
                var toConfig = callProp(config, name);
                if (target) toValue = target.animations[name].parent; // Detect changes, animated values will be checked in the raf-loop

                if (toConfig.decay !== void 0 || !shallowEqual(entry.changes, value)) {
                    _this12.hasChanged = true;
                    var parent, interpolation$$1;
                    if (isNumber || isString) parent = interpolation$$1 = entry.parent || new AnimatedValue(fromValue);
                    else if (isArray) parent = interpolation$$1 = entry.parent || new AnimatedArray(fromValue);
                    else {
                        var prev = entry.interpolation && entry.interpolation.calc(entry.parent.value);

                        if (entry.parent) {
                            parent = entry.parent;
                            parent.setValue(0, false);
                        } else parent = new AnimatedValue(0);

                        var range = {
                            output: [prev !== void 0 ? prev : fromValue, value]
                        };

                        if (entry.interpolation) {
                            interpolation$$1 = entry.interpolation;
                            entry.interpolation.updateConfig(range);
                        } else interpolation$$1 = parent.interpolate(range);
                    } // Set immediate values

                    if (callProp(immediate, name)) parent.setValue(value, false); // Reset animated values

                    var animatedValues = toArray(parent.getPayload());
                    animatedValues.forEach(function(value) {
                        return value.prepare(_this12);
                    });
                    return _extends({}, acc, _defineProperty({}, name, _extends({}, entry, {
                        name: name,
                        parent: parent,
                        interpolation: interpolation$$1,
                        animatedValues: animatedValues,
                        changes: value,
                        fromValues: toArray(parent.getValue()),
                        toValues: toArray(target ? toValue.getPayload() : toValue),
                        immediate: callProp(immediate, name),
                        delay: withDefault(toConfig.delay, delay || 0),
                        initialVelocity: withDefault(toConfig.velocity, 0),
                        clamp: withDefault(toConfig.clamp, false),
                        precision: withDefault(toConfig.precision, 0.01),
                        tension: withDefault(toConfig.tension, 170),
                        friction: withDefault(toConfig.friction, 26),
                        mass: withDefault(toConfig.mass, 1),
                        duration: toConfig.duration,
                        easing: withDefault(toConfig.easing, function(t) {
                            return t;
                        }),
                        decay: toConfig.decay
                    })));
                } else return acc;
            }, this.animations);

            if (this.hasChanged) {
                this.configs = getValues$1(this.animations);
                this.animatedProps = {};
                this.interpolations = {};

                for (var key in this.animations) {
                    this.interpolations[key] = this.animations[key].interpolation;
                    this.animatedProps[key] = this.animations[key].interpolation.getValue();
                }
            } // TODO: clean up ref in controller


            for (var _len = arguments.length, start = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                start[_key - 1] = arguments[_key];
            }

            if (!ref && (autoStart || start.length)) this.start.apply(this, start);
            var onEnd = start[0],
                onUpdate = start[1];
            this.onEnd = typeof onEnd === 'function' && onEnd;
            this.onUpdate = onUpdate;
            return this.getValues();
        }
    }, {
        key: "start",
        value: function start(onEnd, onUpdate) {
            var _this13 = this;

            this.startTime = now();
            if (this.isActive) this.stop();
            this.isActive = true;
            this.onEnd = typeof onEnd === 'function' && onEnd;
            this.onUpdate = onUpdate;
            if (this.props.onStart) this.props.onStart();
            addController(this);
            return new Promise(function(res) {
                return _this13.resolve = res;
            });
        }
    }, {
        key: "stop",
        value: function stop(finished) {
            if (finished === void 0) {
                finished = false;
            } // Reset collected changes since the animation has been stopped cold turkey


            if (finished) getValues$1(this.animations).forEach(function(a) {
                return a.changes = undefined;
            });
            this.debouncedOnEnd({
                finished: finished
            });
        }
    }, {
        key: "destroy",
        value: function destroy() {
            removeController(this);
            this.props = {};
            this.merged = {};
            this.animations = {};
            this.interpolations = {};
            this.animatedProps = {};
            this.configs = [];
        }
    }, {
        key: "debouncedOnEnd",
        value: function debouncedOnEnd(result) {
            removeController(this);
            this.isActive = false;
            var onEnd = this.onEnd;
            this.onEnd = null;
            if (onEnd) onEnd(result);
            if (this.resolve) this.resolve();
            this.resolve = null;
        }
    }]);

    return Controller;
}();

var AnimatedProps = /*#__PURE__*/ function(_AnimatedObjectWithCh2) {
    _inherits(AnimatedProps, _AnimatedObjectWithCh2);

    var _super8 = _createSuper(AnimatedProps);

    function AnimatedProps(props, callback) {
        var _this14;

        _classCallCheck(this, AnimatedProps);

        _this14 = _super8.call(this);
        if (props.style) props = _extends({}, props, {
            style: createAnimatedStyle(props.style)
        });
        _this14.payload = props;
        _this14.update = callback;

        _this14.attach();

        return _this14;
    }

    return AnimatedProps;
}(AnimatedObjectWithChildren);

function createAnimatedComponent(Component) {
    var AnimatedComponent = /*#__PURE__*/ function(_React__default$Compo) {
        _inherits(AnimatedComponent, _React__default$Compo);

        var _super9 = _createSuper(AnimatedComponent);

        function AnimatedComponent(props) {
            var _this15;

            _classCallCheck(this, AnimatedComponent);

            _this15 = _super9.call(this);

            _this15.callback = function() {
                if (_this15.node) {
                    var didUpdate = applyAnimatedValues.fn(_this15.node, _this15.propsAnimated.getAnimatedValue(), _assertThisInitialized(_this15));
                    if (didUpdate === false) _this15.forceUpdate();
                }
            };

            _this15.attachProps(props);

            return _this15;
        }

        _createClass(AnimatedComponent, [{
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
                this.propsAnimated && this.propsAnimated.detach();
            }
        }, {
            key: "setNativeProps",
            value: function setNativeProps(props) {
                var didUpdate = applyAnimatedValues.fn(this.node, props, this);
                if (didUpdate === false) this.forceUpdate();
            } // The system is best designed when setNativeProps is implemented. It is
            // able to avoid re-rendering and directly set the attributes that
            // changed. However, setNativeProps can only be implemented on leaf
            // native components. If you want to animate a composite component, you
            // need to re-render it. In this case, we have a fallback that uses
            // forceUpdate.

        }, {
            key: "attachProps",
            value: function attachProps(_ref) {
                var forwardRef = _ref.forwardRef,
                    nextProps = _objectWithoutPropertiesLoose(_ref, ["forwardRef"]);

                var oldPropsAnimated = this.propsAnimated;
                this.propsAnimated = new AnimatedProps(nextProps, this.callback); // When you call detach, it removes the element from the parent list
                // of children. If it goes to 0, then the parent also detaches itself
                // and so on.
                // An optimization is to attach the new elements and THEN detach the old
                // ones instead of detaching and THEN attaching.
                // This way the intermediate state isn't to go to 0 and trigger
                // this expensive recursive detaching to then re-attach everything on
                // the very next operation.

                oldPropsAnimated && oldPropsAnimated.detach();
            }
        }, {
            key: "shouldComponentUpdate",
            value: function shouldComponentUpdate(props) {
                var style = props.style,
                    nextProps = _objectWithoutPropertiesLoose(props, ["style"]);

                var _this$props = this.props,
                    currentStyle = _this$props.style,
                    currentProps = _objectWithoutPropertiesLoose(_this$props, ["style"]);

                if (!shallowEqual(currentProps, nextProps) || !shallowEqual(currentStyle, style)) {
                    this.attachProps(props);
                    return true;
                }

                return false;
            }
        }, {
            key: "render",
            value: function render() {
                var _this16 = this;

                var _this$propsAnimated$g = this.propsAnimated.getValue(),
                    scrollTop = _this$propsAnimated$g.scrollTop,
                    scrollLeft = _this$propsAnimated$g.scrollLeft,
                    animatedProps = _objectWithoutPropertiesLoose(_this$propsAnimated$g, ["scrollTop", "scrollLeft"]);

                return React__default.createElement(Component, _extends({}, animatedProps, {
                    ref: function ref(node) {
                        return _this16.node = handleRef(node, _this16.props.forwardRef);
                    }
                }));
            }
        }]);

        return AnimatedComponent;
    }(React__default.Component);

    return React__default.forwardRef(function(props, ref) {
        return React__default.createElement(AnimatedComponent, _extends({}, props, {
            forwardRef: ref
        }));
    });
}

var config = {
    default: {
        tension: 170,
        friction: 26
    },
    gentle: {
        tension: 120,
        friction: 14
    },
    wobbly: {
        tension: 180,
        friction: 12
    },
    stiff: {
        tension: 210,
        friction: 20
    },
    slow: {
        tension: 280,
        friction: 60
    },
    molasses: {
        tension: 280,
        friction: 120
    }
};

var Spring = /*#__PURE__*/ function(_React__default$Compo2) {
    _inherits(Spring, _React__default$Compo2);

    var _super10 = _createSuper(Spring);

    function Spring() {
        var _this17;

        _classCallCheck(this, Spring);

        _this17 = _super10.apply(this, arguments);
        _this17.state = {
            lastProps: {
                from: {},
                to: {}
            },
            propsChanged: false,
            internal: false
        };
        _this17.controller = new Controller(null, null);
        _this17.didUpdate = false;
        _this17.didInject = false;
        _this17.finished = true;

        _this17.start = function() {
            _this17.finished = false;
            var wasMounted = _this17.mounted;

            _this17.controller.start(function(props) {
                return _this17.finish(_extends({}, props, {
                    wasMounted: wasMounted
                }));
            }, _this17.update);
        };

        _this17.stop = function() {
            return _this17.controller.stop(true);
        };

        _this17.update = function() {
            return _this17.mounted && _this17.setState({
                internal: true
            });
        };

        _this17.finish = function(_ref) {
            var finished = _ref.finished,
                noChange = _ref.noChange,
                wasMounted = _ref.wasMounted;
            _this17.finished = true;

            if (_this17.mounted && finished) {
                // Only call onRest if either we *were* mounted, or when there were changes
                if (_this17.props.onRest && (wasMounted || !noChange)) _this17.props.onRest(_this17.controller.merged); // Restore end-state

                if (_this17.mounted && _this17.didInject) {
                    _this17.afterInject = convertValues(_this17.props);

                    _this17.setState({
                        internal: true
                    });
                } // If we have an inject or values to apply after the animation we ping here


                if (_this17.mounted && (_this17.didInject || _this17.props.after)) _this17.setState({
                    internal: true
                });
                _this17.didInject = false;
            }
        };

        return _this17;
    }

    _createClass(Spring, [{
        key: "componentDidMount",
        value: function componentDidMount() {
            // componentDidUpdate isn't called on mount, we call it here to start animating
            this.componentDidUpdate();
            this.mounted = true;
        }
    }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
            // Stop all ongoing animtions
            this.mounted = false;
            this.stop();
        }
    }, {
        key: "render",
        value: function render() {
            var _this18 = this;

            var children = this.props.children;
            var propsChanged = this.state.propsChanged; // Inject phase -----------------------------------------------------------
            // Handle injected frames, for instance targets/web/fix-auto
            // An inject will return an intermediary React node which measures itself out
            // .. and returns a callback when the values sought after are ready, usually "auto".

            if (this.props.inject && propsChanged && !this.injectProps) {
                var frame = this.props.inject(this.props, function(injectProps) {
                    // The inject frame has rendered, now let's update animations...
                    _this18.injectProps = injectProps;

                    _this18.setState({
                        internal: true
                    });
                }); // Render out injected frame

                if (frame) return frame;
            } // Update phase -----------------------------------------------------------


            if (this.injectProps || propsChanged) {
                // We can potentially cause setState, but we're inside render, the flag prevents that
                this.didInject = false; // Update animations, this turns from/to props into AnimatedValues
                // An update can occur on injected props, or when own-props have changed.

                if (this.injectProps) {
                    this.controller.update(this.injectProps); // didInject is needed, because there will be a 3rd stage, where the original values
                    // .. will be restored after the animation is finished. When someone animates towards
                    // .. "auto", the end-result should be "auto", not "1999px", which would block nested
                    // .. height/width changes.

                    this.didInject = true;
                } else if (propsChanged) this.controller.update(this.props); // Flag an update that occured, componentDidUpdate will start the animation later on


                this.didUpdate = true;
                this.afterInject = undefined;
                this.injectProps = undefined;
            } // Render phase -----------------------------------------------------------
            // Render out raw values or AnimatedValues depending on "native"


            var values = _extends({}, this.controller.getValues(), this.afterInject);

            if (this.finished) values = _extends({}, values, this.props.after);
            return Object.keys(values).length ? children(values) : null;
        }
    }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate() {
            // The animation has to start *after* render, since at that point the scene
            // .. graph should be established, so we do it here. Unfortunatelly, non-native
            // .. animations as well as "auto"-injects call forceUpdate, so it's causing a loop.
            // .. didUpdate prevents that as it gets set only on prop changes.
            if (this.didUpdate) this.start();
            this.didUpdate = false;
        }
    }], [{
        key: "getDerivedStateFromProps",
        value: function getDerivedStateFromProps(props, _ref2) {
            var internal = _ref2.internal,
                lastProps = _ref2.lastProps; // The following is a test against props that could alter the animation

            var from = props.from,
                to = props.to,
                reset = props.reset,
                force = props.force;
            var propsChanged = !shallowEqual(to, lastProps.to) || !shallowEqual(from, lastProps.from) || reset && !internal || force && !internal;
            return {
                propsChanged: propsChanged,
                lastProps: props,
                internal: false
            };
        }
    }]);

    return Spring;
}(React__default.Component);

Spring.defaultProps = {
    from: {},
    to: {},
    config: config.default,
    native: false,
    immediate: false,
    reset: false,
    force: false,
    inject: bugfixes
};

var Trail = /*#__PURE__*/ function(_React__default$PureC) {
    _inherits(Trail, _React__default$PureC);

    var _super11 = _createSuper(Trail);

    function Trail() {
        var _this19;

        _classCallCheck(this, Trail);

        _this19 = _super11.apply(this, arguments);
        _this19.first = true;
        _this19.instances = new Set();

        _this19.hook = function(instance, index, length, reverse) {
            // Add instance to set
            _this19.instances.add(instance); // Return undefined on the first index and from then on the previous instance


            if (reverse ? index === length - 1 : index === 0) return undefined;
            else return Array.from(_this19.instances)[reverse ? index + 1 : index - 1];
        };

        return _this19;
    }

    _createClass(Trail, [{
        key: "render",
        value: function render() {
            var _this20 = this;

            var _this$props = this.props,
                items = _this$props.items,
                _children = _this$props.children,
                _this$props$from = _this$props.from,
                from = _this$props$from === void 0 ? {} : _this$props$from,
                initial = _this$props.initial,
                reverse = _this$props.reverse,
                keys = _this$props.keys,
                delay = _this$props.delay,
                onRest = _this$props.onRest,
                props = _objectWithoutPropertiesLoose(_this$props, ["items", "children", "from", "initial", "reverse", "keys", "delay", "onRest"]);

            var array = toArray(items);
            return toArray(array).map(function(item, i) {
                return React__default.createElement(Spring, _extends({
                    onRest: i === 0 ? onRest : null,
                    key: typeof keys === 'function' ? keys(item) : toArray(keys)[i],
                    from: _this20.first && initial !== void 0 ? initial || {} : from
                }, props, {
                    delay: i === 0 && delay || undefined,
                    attach: function attach(instance) {
                        return _this20.hook(instance, i, array.length, reverse);
                    },
                    children: function children(props) {
                        var child = _children(item, i);

                        return child ? child(props) : null;
                    }
                }));
            });
        }
    }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps) {
            this.first = false;
            if (prevProps.items !== this.props.items) this.instances.clear();
        }
    }]);

    return Trail;
}(React__default.PureComponent);

Trail.defaultProps = {
    keys: function keys(item) {
        return item;
    }
};
var DEFAULT = '__default';

var KeyframesImpl = /*#__PURE__*/ function(_React__default$PureC2) {
    _inherits(KeyframesImpl, _React__default$PureC2);

    var _super12 = _createSuper(KeyframesImpl);

    function KeyframesImpl() {
        var _this21;

        _classCallCheck(this, KeyframesImpl);

        var _this;

        _this21 = _super12.apply(this, arguments);
        _this = _assertThisInitialized(_this21);
        _this21.guid = 0;
        _this21.state = {
            props: {},
            resolve: function resolve() {
                return null;
            },
            last: true,
            index: 0
        };

        _this21.next = function(props, last, index) {
            if (last === void 0) {
                last = true;
            }

            if (index === void 0) {
                index = 0;
            }

            _this.running = true;
            return new Promise(function(resolve) {
                _this.mounted && _this.setState(function(state) {
                    return {
                        props: props,
                        resolve: resolve,
                        last: last,
                        index: index
                    };
                }, function() {
                    return _this.running = false;
                });
            });
        };

        return _this21;
    }

    _createClass(KeyframesImpl, [{
        key: "componentDidMount",
        value: function componentDidMount() {
            this.mounted = true;
            this.componentDidUpdate({});
        }
    }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
            this.mounted = false;
        }
    }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate(previous) {
            var _this22 = this;

            var _this2 = this;

            var _this$props = this.props,
                states = _this$props.states,
                f = _this$props.filter,
                state = _this$props.state;

            if (previous.state !== this.props.state || this.props.reset && !this.running || !shallowEqual(states[state], previous.states[previous.state])) {
                if (states && state && states[state]) {
                    (function() {
                        var localId = ++_this22.guid;
                        var slots = states[state];

                        if (slots) {
                            if (Array.isArray(slots)) {
                                var q = Promise.resolve();

                                var _loop = function _loop(i) {
                                    var index = i;
                                    var slot = slots[index];
                                    var last = index === slots.length - 1;
                                    q = q.then(function() {
                                        return localId === _this22.guid && _this22.next(f(slot), last, index);
                                    });
                                };

                                for (var i = 0; i < slots.length; i++) {
                                    _loop(i);
                                }
                            } else if (typeof slots === 'function') {
                                var index = 0;
                                slots( // next
                                    function(props, last) {
                                        if (last === void 0) {
                                            last = false;
                                        }

                                        return localId === _this2.guid && _this2.next(f(props), last, index++);
                                    }, // cancel
                                    function() {
                                        return requestFrame(function() {
                                            return _this22.instance && _this22.instance.stop();
                                        });
                                    }, // ownprops
                                    _this22.props);
                            } else {
                                _this22.next(f(states[state]));
                            }
                        }
                    })();
                }
            }
        }
    }, {
        key: "render",
        value: function render() {
            var _this23 = this;

            var _this$state = this.state,
                props = _this$state.props,
                resolve = _this$state.resolve,
                last = _this$state.last,
                index = _this$state.index;
            if (!props || Object.keys(props).length === 0) return null;

            var _this$props2 = this.props,
                state = _this$props2.state,
                filter = _this$props2.filter,
                states = _this$props2.states,
                config = _this$props2.config,
                Component = _this$props2.primitive,
                _onRest = _this$props2.onRest,
                forwardRef = _this$props2.forwardRef,
                rest = _objectWithoutPropertiesLoose(_this$props2, ["state", "filter", "states", "config", "primitive", "onRest", "forwardRef"]); // Arrayed configs need an index to process


            if (Array.isArray(config)) config = config[index];
            return React__default.createElement(Component, _extends({
                ref: function ref(_ref) {
                    return _this23.instance = handleRef(_ref, forwardRef);
                },
                config: config
            }, rest, props, {
                onRest: function onRest(args) {
                    resolve(args);
                    if (_onRest && last) _onRest(args);
                }
            }));
        }
    }]);

    return KeyframesImpl;
}(React__default.PureComponent);

KeyframesImpl.defaultProps = {
    state: DEFAULT
};
var Keyframes = React__default.forwardRef(function(props, ref) {
    return React__default.createElement(KeyframesImpl, _extends({}, props, {
        forwardRef: ref
    }));
});

Keyframes.create = function(primitive) {
    return function(states, filter) {
        if (filter === void 0) {
            filter = function filter(states) {
                return states;
            };
        }

        if (typeof states === 'function' || Array.isArray(states)) states = _defineProperty({}, DEFAULT, states);
        return function(props) {
            return React__default.createElement(KeyframesImpl, _extends({
                primitive: primitive,
                states: states,
                filter: filter
            }, props));
        };
    };
};

Keyframes.Spring = function(states) {
    return Keyframes.create(Spring)(states, interpolateTo);
};

Keyframes.Trail = function(states) {
    return Keyframes.create(Trail)(states, interpolateTo);
};

var guid = 0;

var get = function get(props) {
    var items = props.items,
        keys = props.keys,
        rest = _objectWithoutPropertiesLoose(props, ["items", "keys"]);

    items = toArray(items !== void 0 ? items : null);
    keys = typeof keys === 'function' ? items.map(keys) : toArray(keys); // Make sure numeric keys are interpreted as Strings (5 !== "5")

    return _extends({
        items: items,
        keys: keys.map(function(key) {
            return String(key);
        })
    }, rest);
};

var Transition = /*#__PURE__*/ function(_React__default$PureC3) {
    _inherits(Transition, _React__default$PureC3);

    var _super13 = _createSuper(Transition);

    function Transition(prevProps) {
        var _this24;

        _classCallCheck(this, Transition);

        _this24 = _super13.call(this, prevProps);

        _this24.destroyItem = function(item, key, state) {
            return function(values) {
                var _this$props = _this24.props,
                    onRest = _this$props.onRest,
                    onDestroyed = _this$props.onDestroyed;

                if (_this24.mounted) {
                    onDestroyed && onDestroyed(item);

                    _this24.setState(function(_ref) {
                        var deleted = _ref.deleted;
                        return {
                            deleted: deleted.filter(function(t) {
                                return t.key !== key;
                            })
                        };
                    });

                    onRest && onRest(item, state, values);
                }
            };
        };

        _this24.state = {
            first: true,
            transitions: [],
            current: {},
            deleted: [],
            prevProps: prevProps
        };
        return _this24;
    }

    _createClass(Transition, [{
        key: "componentDidMount",
        value: function componentDidMount() {
            this.mounted = true;
        }
    }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
            this.mounted = false;
        }
    }, {
        key: "render",
        value: function render() {
            var _this25 = this;

            var _this$props2 = this.props,
                initial = _this$props2.initial,
                _this$props2$from = _this$props2.from,
                _this$props2$enter = _this$props2.enter,
                _this$props2$leave = _this$props2.leave,
                _this$props2$update = _this$props2.update,
                onDestroyed = _this$props2.onDestroyed,
                keys = _this$props2.keys,
                items = _this$props2.items,
                onFrame = _this$props2.onFrame,
                onRest = _this$props2.onRest,
                onStart = _this$props2.onStart,
                trail = _this$props2.trail,
                config = _this$props2.config,
                _children = _this$props2.children,
                unique = _this$props2.unique,
                reset = _this$props2.reset,
                extra = _objectWithoutPropertiesLoose(_this$props2, ["initial", "from", "enter", "leave", "update", "onDestroyed", "keys", "items", "onFrame", "onRest", "onStart", "trail", "config", "children", "unique", "reset"]);

            return this.state.transitions.map(function(_ref4, i) {
                var state = _ref4.state,
                    key = _ref4.key,
                    item = _ref4.item,
                    from = _ref4.from,
                    to = _ref4.to,
                    trail = _ref4.trail,
                    config = _ref4.config,
                    destroyed = _ref4.destroyed;
                return React__default.createElement(Keyframes, _extends({
                    reset: reset && state === 'enter',
                    primitive: Spring,
                    state: state,
                    filter: interpolateTo,
                    states: _defineProperty({}, state, to),
                    key: key,
                    onRest: destroyed ? _this25.destroyItem(item, key, state) : onRest && function(values) {
                        return onRest(item, state, values);
                    },
                    onStart: onStart && function() {
                        return onStart(item, state);
                    },
                    onFrame: onFrame && function(values) {
                        return onFrame(item, state, values);
                    },
                    delay: trail,
                    config: config
                }, extra, {
                    from: from,
                    children: function children(props) {
                        var child = _children(item, state, i);

                        return child ? child(props) : null;
                    }
                }));
            });
        }
    }], [{
        key: "getDerivedStateFromProps",
        value: function getDerivedStateFromProps(props, _ref2) {
            var first = _ref2.first,
                prevProps = _ref2.prevProps,
                state = _objectWithoutPropertiesLoose(_ref2, ["first", "prevProps"]);

            var _get = get(props),
                items = _get.items,
                keys = _get.keys,
                initial = _get.initial,
                from = _get.from,
                enter = _get.enter,
                leave = _get.leave,
                update = _get.update,
                _get$trail = _get.trail,
                trail = _get$trail === void 0 ? 0 : _get$trail,
                unique = _get.unique,
                config = _get.config;

            var _get2 = get(prevProps),
                _keys = _get2.keys,
                _items = _get2.items;

            var current = _extends({}, state.current);

            var deleted = _toConsumableArray(state.deleted); // Compare next keys with current keys


            var currentKeys = Object.keys(current);
            var currentSet = new Set(currentKeys);
            var nextSet = new Set(keys);
            var added = keys.filter(function(item) {
                return !currentSet.has(item);
            });
            var removed = state.transitions.filter(function(item) {
                return !item.destroyed && !nextSet.has(item.originalKey);
            }).map(function(i) {
                return i.originalKey;
            });
            var updated = keys.filter(function(item) {
                return currentSet.has(item);
            });
            var delay = 0;
            added.forEach(function(key) {
                // In unique mode, remove fading out transitions if their key comes in again
                if (unique && deleted.find(function(d) {
                        return d.originalKey === key;
                    })) deleted = deleted.filter(function(t) {
                    return t.originalKey !== key;
                });
                var keyIndex = keys.indexOf(key);
                var item = items[keyIndex];
                var state = 'enter';
                current[key] = {
                    state: state,
                    originalKey: key,
                    key: unique ? String(key) : guid++,
                    item: item,
                    trail: delay = delay + trail,
                    config: callProp(config, item, state),
                    from: callProp(first ? initial !== void 0 ? initial || {} : from : from, item),
                    to: callProp(enter, item)
                };
            });
            removed.forEach(function(key) {
                var keyIndex = _keys.indexOf(key);

                var item = _items[keyIndex];
                var state = 'leave';
                deleted.push(_extends({}, current[key], {
                    state: state,
                    destroyed: true,
                    left: _keys[Math.max(0, keyIndex - 1)],
                    right: _keys[Math.min(_keys.length, keyIndex + 1)],
                    trail: delay = delay + trail,
                    config: callProp(config, item, state),
                    to: callProp(leave, item)
                }));
                delete current[key];
            });
            updated.forEach(function(key) {
                var keyIndex = keys.indexOf(key);
                var item = items[keyIndex];
                var state = 'update';
                current[key] = _extends({}, current[key], {
                    item: item,
                    state: state,
                    trail: delay = delay + trail,
                    config: callProp(config, item, state),
                    to: callProp(update, item)
                });
            }); // This tries to restore order for deleted items by finding their last known siblings

            var out = keys.map(function(key) {
                return current[key];
            });
            deleted.forEach(function(_ref3) {
                var left = _ref3.left,
                    right = _ref3.right,
                    transition = _objectWithoutPropertiesLoose(_ref3, ["left", "right"]);

                var pos; // Was it the element on the left, if yes, move there ...

                if ((pos = out.findIndex(function(t) {
                        return t.originalKey === left;
                    })) !== -1) pos += 1; // Or how about the element on the right ...

                if (pos === -1) pos = out.findIndex(function(t) {
                    return t.originalKey === right;
                }); // Maybe we'll find it in the list of deleted items

                if (pos === -1) pos = deleted.findIndex(function(t) {
                    return t.originalKey === left;
                }); // Checking right side as well

                if (pos === -1) pos = deleted.findIndex(function(t) {
                    return t.originalKey === right;
                }); // And if nothing else helps, move it to the start ¯\_(ツ)_/¯

                pos = Math.max(0, pos);
                out = [].concat(_toConsumableArray(out.slice(0, pos)), [transition], _toConsumableArray(out.slice(pos)));
            });
            return {
                first: first && added.length === 0,
                transitions: out,
                current: current,
                deleted: deleted,
                prevProps: props
            };
        }
    }]);

    return Transition;
}(React__default.PureComponent);

Transition.defaultProps = {
    keys: function keys(item) {
        return item;
    },
    unique: false,
    reset: false
};
var domElements = ['a', 'abbr', 'address', 'area', 'article', 'aside', 'audio', 'b', 'base', 'bdi', 'bdo', 'big', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'cite', 'code', 'col', 'colgroup', 'data', 'datalist', 'dd', 'del', 'details', 'dfn', 'dialog', 'div', 'dl', 'dt', 'em', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'keygen', 'label', 'legend', 'li', 'link', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meta', 'meter', 'nav', 'noscript', 'object', 'ol', 'optgroup', 'option', 'output', 'p', 'param', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'script', 'section', 'select', 'small', 'source', 'span', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'track', 'u', 'ul', 'var', 'video', 'wbr', // SVG
    'circle', 'clipPath', 'defs', 'ellipse', 'foreignObject', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'svg', 'text', 'tspan'
];
var extendedAnimated = domElements.reduce(function(acc, element) {
    acc[element] = createAnimatedComponent(element);
    return acc;
}, createAnimatedComponent);
exports.Spring = Spring;
exports.Keyframes = Keyframes;
exports.Transition = Transition;
exports.Trail = Trail;
exports.Controller = Controller;
exports.config = config;
exports.animated = extendedAnimated;
exports.interpolate = interpolate$1;
exports.Globals = Globals;